openapi: 3.0.0
servers:
  - description: Cluster Endpoint
    url: /api
info:
  description: Medical Appointment Scheduling System
  version: "1.0.0"
  title: Appointment Scheduling Api
  contact:
    email: xpokorny@stuba.sk
  license:
    name: CC BY 4.0
    url: "https://creativecommons.org/licenses/by/4.0/"
tags:
- name: appointments
  description: Appointment management API
- name: users
  description: User management API
- name: locations
  description: Medical locations API
paths:
  /appointments:
    post:
      tags:
        - appointments
      summary: Create a new appointment
      operationId: createAppointment
      description: Use this method to create a new appointment
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Appointment"
            examples:
              request-sample:
                $ref: "#/components/examples/AppointmentExample"
        description: Appointment details to store
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Appointment"
              examples:
                updated-response:
                  $ref: "#/components/examples/AppointmentExample"
        "400":
          description: Bad request
        "404":
          description: Not found
        "409":
          description: Already exists
    get:
      tags:
        - appointments
      summary: Get all appointments
      operationId: getAppointments
      description: Use this method to get all appointments, or filter by user
      parameters:
        - in: query
          name: userId
          description: ID of the user (optional, filters appointments where user is patient or creator)
          required: false
          schema:
            type: string
        - in: query
          name: role
          description: Filter by role (patient or creator)
          required: false
          schema:
            type: string
            enum: [patient, creator]
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Appointment"
              examples:
                response:
                  $ref: "#/components/examples/AppointmentsListExample"
        "400":
          description: Bad request  
  /appointments/{appointmentId}:
    get:
      tags:
        - appointments
      summary: Get appointment details
      operationId: getAppointment
      description: Use this method to get details of a specific appointment
      parameters:
        - in: path
          name: appointmentId
          description: ID of the appointment
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Appointment"
              examples:
                response:
                  $ref: "#/components/examples/AppointmentExample"
        "400":
          description: Bad request
        "404":
          description: Not found
    put:
      tags:
        - appointments
      summary: Update an appointment
      operationId: updateAppointment
      description: Use this method to update an existing appointment
      parameters:
        - in: path
          name: appointmentId
          description: ID of the appointment
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Appointment"
            examples:
              request:
                $ref: "#/components/examples/AppointmentExample"
        description: Updated appointment details
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Appointment"
              examples:
                updated-response:
                  $ref: "#/components/examples/AppointmentExample"
        "400":
          description: Bad request
        "404":
          description: Not found
        "409":
          description: Already exists
    delete:
      tags:
        - appointments
      summary: Delete an appointment
      operationId: deleteAppointment
      description: Use this method to delete a specific appointment
      parameters:
        - in: path
          name: appointmentId
          description: ID of the appointment
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Success
        "400":
          description: Bad request
        "404":
          description: Not found
  /users:
    get:
      tags:
        - users
      summary: Get all users
      operationId: getUsers
      description: Use this method to get all users
      parameters:
        - in: query
          name: role
          description: Filter by role (patient or creator)
          required: false
          schema:
            type: string
            enum: [patient, doctor]
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
              examples:
                response:
                  $ref: "#/components/examples/UsersListExample"
        "400":
          description: Bad request
  /users/{userId}:
    get:
      tags:
        - users
      summary: Get user details
      operationId: getUser
      description: Use this method to get details of a specific user
      parameters:
        - in: path
          name: userId
          description: ID of the user
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              examples:
                response:
                  $ref: "#/components/examples/UserExample"
        "400":
          description: Bad request
        "404":
          description: Not found
  /locations:
    get:
      tags:
        - locations
      summary: Get all locations
      operationId: getLocations
      description: Use this method to get all locations
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Location"
              examples:
                response:
                  $ref: "#/components/examples/LocationsListExample"
        "400":
          description: Bad request
components:
  schemas:
    Appointment:
      type: object
      required: [id, patient, doctor, location, dateTime, createdBy]
      properties:
        id:
          type: string
          description: Unique identifier of the appointment
        patient:
          $ref: '#/components/schemas/User'
          description: Patient details
        doctor:
          $ref: '#/components/schemas/User'
          description: Doctor details
        location:
          $ref: '#/components/schemas/Location'
          description: Location details
        dateTime:
          type: string
          format: date-time
          description: Date and time of the appointment
        createdBy:
          $ref: '#/components/schemas/User'
          description: User who created the appointment
    User:
      type: object
      required: [id, name, role]
      properties:
        id:
          type: string
          description: Unique identifier of the user
        name:
          type: string
          description: Full name of the user
        role:
          type: string
          enum: [patient, doctor]
          description: Role of the user
    Location:
      type: object
      required: [id, name, address]
      properties:
        id:
          type: string
          description: Unique identifier of the location
        name:
          type: string
          description: Name of the medical facility
        address:
          type: string
          description: Physical address of the location
  examples:
    AppointmentExample:
      summary: Sample appointment
      description: Example of an appointment
      value:
        id: "apt-001"
        patient:
          id: "user-001"
          name: "John Doe"
          role: "patient"
        doctor:
          id: "user-002"
          name: "Dr. Jane Smith"
          role: "doctor"
        location:
          id: "loc-001"
          name: "City Hospital"
          address: "123 Medical St, City"
        dateTime: "2024-03-20T10:00:00Z"
        createdBy:
          id: "user-002"
          name: "Dr. Jane Smith"
          role: "doctor"
    AppointmentsListExample:
      summary: List of appointments
      description: Example list containing 2 appointments
      value:
        - id: "apt-001"
          patient:
            id: "user-001"
            name: "John Doe"
            role: "patient"
          doctor:
            id: "user-002"
            name: "Dr. Jane Smith"
            role: "doctor"
          location:
            id: "loc-001"
            name: "City Hospital"
            address: "123 Medical St, City"
          dateTime: "2024-03-20T10:00:00Z"
          createdBy:
            id: "user-002"
            name: "Dr. Jane Smith"
            role: "doctor"
        - id: "apt-002"
          patient:
            id: "user-003"
            name: "Alice Johnson"
            role: "patient"
          doctor:
            id: "user-002"
            name: "Dr. Jane Smith"
            role: "doctor"
          location:
            id: "loc-001"
            name: "City Hospital"
            address: "123 Medical St, City"
          dateTime: "2024-03-20T11:00:00Z"
          createdBy:
            id: "user-003"
            name: "Alice Johnson"
            role: "patient"
    UserExample:
      summary: Sample user
      description: Example of a user
      value:
        id: "user-001"
        name: "John Doe"
        role: "patient"
    UsersListExample:
      summary: List of users
      description: Example list containing 3 users
      value:
        - id: "user-001"
          name: "John Doe"
          role: "patient"
        - id: "user-002"
          name: "Dr. Jane Smith"
          role: "doctor"
        - id: "user-003"
          name: "Alice Johnson"
          role: "patient"
    LocationExample:
      summary: Sample location
      description: Example of a medical location
      value:
        id: "loc-001"
        name: "City Hospital"
        address: "123 Medical St, City"
    LocationsListExample:
      summary: List of locations
      description: Example list containing 2 locations
      value:
        - id: "loc-001"
          name: "City Hospital"
          address: "123 Medical St, City"
        - id: "loc-002"
          name: "Medical Center"
          address: "456 Health Ave, Town"